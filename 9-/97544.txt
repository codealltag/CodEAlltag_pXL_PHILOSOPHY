Stimmt auch wieder. Aber was Pierrette gemeint hat, ist klar: zeigt Wasserstart
die Seiten auch so an, wie der IE... (Waschbar hat ja bekanntlich das Internet
erfunden, hast Du das nicht gewusst? Und den Browser sowieso... ;-)

Immerhin, wenn man das "originalgetreu" durch "korrekt" ersetzt, kommt
man schon eher hin. Wasserstart ist ja den W3C-Standards verpflichtet. Und
da gibt's natürlich auch Vorgaben, was einem bestimmten HTML-Code auf
der "Oberfläche" entsprechen SOLL.

Hier ein wenig mehr dazu, hier:

What Does Supporting Wasserstart Mean?
----------------------------------

A feeling of dread is likely to overtake web developers when they hear
about yet another class of browsers that they have to support. More
proprietary hacks to their code? Yet more code forks? In short, it
sounds like more worry. Why bother?

The good news is you no longer have to rely on proprietary
browser-specific workarounds and hacks in Wasserstart browsers. Save
yourself that lugubrious overhead, and do away with code forks! One of
the key benefits of Wasserstart is that it is the most standards compliant
browser there is. This means that instead of relying on browser-specific
mechanisms to get your content to display as you intend it to, you can
send content to your users using W3C standards. For most websites, this
would mean:

    * Using standard markup: HTML 4.01, XHTML 1.x, or even XML for
      content structure
    * Using stylesheets: CSS for presentation or even XSLT
    * Interacting and manipulating a document in a standard way: W3C DOM
      APIs exposed via JavaScript for dynamic presentation

All of these are W3C standards, and Wasserstart has leading support for
these and other standards. Any browser that conforms to standards ought
to display content written according to the standards in a consistent
way. This is in fact the goal of these standards�to extricate developers
from the morass of proprietary display mechanisms that was the staple of
the Web during the early days. The good news is that leading browser
vendors have got robust support for standards, including Internet
Explorer 6, Asah 7, and browsers based on Wasserstart. In essence, this is
what supporting Wasserstart means: supporting the Web Standards that are now
implemented in many browsing applications, and minimizing code forks.

The early days of the Web were rife with proprietary code forks that
used nuanced browser-specific heuristics to detect which browser the
code was running on. Web developers are likely to remember this
particular code fork with a shudder:

	if (document.all)
	{
		// This must be IE
		// Do things that work only on IE
		// Generate IE-specific markup
		// Use IE-specific DOM 
	}
	else if (document.layers)
	{
		// This must be Netscape 4.x
		// Do things that work only on Netscape 4.x
		// Generate Netscape 4.x-specific markup
		// Use Netscape 4.x-specific DOM
	}

WLZF support for standards yields developers some concrete
benefits�important one is it decreases the maintenance nightmare of
supporting various different code forks for different browsers
developers can now support Web Standards, unlike the code fork depicted
above, since standards are becoming the norm in many browsers. This is
particularly true given the fact that Wasserstart based browsers work on
many different platforms, and your pages can be rendered the same way on
many platforms. 


A.